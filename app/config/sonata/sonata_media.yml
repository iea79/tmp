#
# more information can be found here http://sonata-project.org/bundles/media
#
parameters:
    sonata.media.admin.media.class: Application\Sonata\MediaBundle\Admin\PHPCR\MediaAdmin
sonata_media:
    db_driver:       doctrine_phpcr # | doctrine_mongodb
    class:   
        media: Application\Sonata\MediaBundle\PHPCR\Media
        gallery: Application\Sonata\MediaBundle\PHPCR\Gallery
        gallery_has_media: Application\Sonata\MediaBundle\PHPCR\GalleryHasMedia 

    default_context: default
    contexts:
        default:  # the default context is mandatory
            download:
                mode: http # X-Sendfile | http
            providers:
                - sonata.media.provider.dailymotion
                - sonata.media.provider.youtube
                - sonata.media.provider.image
                - sonata.media.provider.file
                - sonata.media.provider.vimeo

            formats:
                small: { width: 100, quality: 100}
                big:   { width: 970 , quality: 100}
       
        profit:
            providers:
                - sonata.media.provider.dailymotion
                - sonata.media.provider.youtube
                - sonata.media.provider.image

            formats:
                abstract: { width: 150, quality: 95}
                small:    { width: 400, quality: 100}
        
        about:
            providers:
                - sonata.media.provider.dailymotion
                - sonata.media.provider.youtube
                - sonata.media.provider.image

            formats:
                abstract: { width: 150, quality: 95}
                small:    { width: 280, quality: 100}

        videoguides:
            providers:
                - sonata.media.provider.youtube
                - sonata.media.provider.vimeo
                - sonata.media.provider.dailymotion
            
            formats:
                preview: {width: 237, quality: 90}
                big: {width: 640, quality: 100}

        blog:
            providers:
                - sonata.media.provider.dailymotion
                - sonata.media.provider.youtube
                - sonata.media.provider.image

            formats:
                preview:   { width: 238, height: 133, quality: 100}
                small:     { width: 200, quality: 100}
                large:     { width: 600, quality: 100}
        news:
            providers:
                - sonata.media.provider.dailymotion
                - sonata.media.provider.youtube
                - sonata.media.provider.image

            formats:
                abstract: { width: 150, quality: 95}
                wide:     { width: 420, quality: 100}

        # sonata_collection:
        #     providers:
        #       - sonata.media.provider.image

        #     formats:
        #         preview: { width: 100, quality: 100}
        #         wide:    { width: 820, quality: 100}

        # sonata_category:
        #     providers:
        #       - sonata.media.provider.image

        #     formats:
        #         preview: { width: 100, quality: 100}
        #         wide:    { width: 820, quality: 100}

        # sonata_product:
        #     providers:
        #         - sonata.media.provider.image

        #     formats:
        #         preview:   { width: 100, quality: 100}
        #         small:     { width: 300, quality: 100}
        #         large:     { width: 750, quality: 100}

    cdn:
        # define the public base url for the uploaded media
        server:
            path:      /uploads/media

    filesystem:
        # define where the uploaded file will be stored
        local:
            directory:  %kernel.root_dir%/../web/uploads/media
            create:     true

    providers:
        # ...
        file:
            # the resizer must be set to false, otherwhise this can delete icon files from the fs
            resizer:    false
        image:
           thumbnail: sonata.media.thumbnail.format          # default value
#          thumbnail: sonata.media.thumbnail.consumer.format # can be used to dispatch the resize action to async task
#          thumbnail: sonata.media.thumbnail.liip_imagine    # use the LiipImagineBundle to resize the image
        vimeo:
            thumbnail: sonata.media.thumbnail.format          # default value
#           thumbnail: sonata.media.thumbnail.consumer.format # can be used to dispatch the resize action to async task
#           thumbnail: sonata.media.thumbnail.liip_imagine    # use the LiipImagineBundle to resize the image
        youtube:
            thumbnail: sonata.media.thumbnail.format          # default value
#           thumbnail: sonata.media.thumbnail.consumer.format # can be used to dispatch the resize action to async task
#           thumbnail: sonata.media.thumbnail.liip_imagine    # use the LiipImagineBundle to resize the image
        dailymotion:
            thumbnail: sonata.media.thumbnail.format          # default value
#           thumbnail: sonata.media.thumbnail.consumer.format # can be used to dispatch the resize action to async task
#           thumbnail: sonata.media.thumbnail.liip_imagine    # use the LiipImagineBundle to resize the image

    pixlr:
        enabled:  false
        referrer: TaxiMyPrice
        secret:   erg53g3h53th36h36h

    resizer:
        simple:
#           mode:  outbound
            mode:  inset

#
# The LiipImagineBundle can be used if you want to convert on demand an image
# to a specific format. (ie a controller render the file)
#    more information can be found here : https://github.com/liip/LiipImagineBundle
#
# liip_imagine:
#    filter_sets:
#
#        # this configuration match the sonata_media configuration format definition
#        sonata_product_preview:
#            quality: 75
#            controller_action: 'SonataMediaBundle:Media:liipImagineFilter'
#            filters:
#                thumbnail: { size: [100, 100], mode: outbound }
#
#        sonata_product_small:
#            quality: 75
#            controller_action: 'SonataMediaBundle:Media:liipImagineFilter'
#            filters:
#                thumbnail: { size: [200, 100], mode: outbound }
#
#        sonata_product_large:
#            quality: 75
#            controller_action: 'SonataMediaBundle:Media:liipImagineFilter'
#            filters:
#                thumbnail: { size: [600, 100], mode: outbound }
#
#        news_abstract:
#            quality: 75
#            controller_action: 'SonataMediaBundle:Media:liipImagineFilter'
#            filters:
#                thumbnail: { size: [100, 100], mode: outbound }
#
#        news_wide:
#            quality: 75
#            controller_action: 'SonataMediaBundle:Media:liipImagineFilter'
#            filters:
#                thumbnail: { size: [820, 100], mode: outbound }
#
#        sonata_collection_preview:
#            quality: 75
#            controller_action: 'SonataMediaBundle:Media:liipImagineFilter'
#            filters:
#                thumbnail: { size: [100, 100], mode: outbound }
#
#        sonata_collection_wide:
#            quality: 75
#            controller_action: 'SonataMediaBundle:Media:liipImagineFilter'
#            filters:
#                thumbnail: { size: [820, 100], mode: outbound }
#
#        sonata_category_preview:
#            quality: 75
#            controller_action: 'SonataMediaBundle:Media:liipImagineFilter'
#            filters:
#                thumbnail: { size: [100, 100], mode: outbound }
#
#        sonata_category_wide:
#            quality: 75
#            controller_action: 'SonataMediaBundle:Media:liipImagineFilter'
#            filters:
#                thumbnail: { size: [820, 100], mode: outbound }
#
#        default_small:
#            quality: 75
#            controller_action: 'SonataMediaBundle:Media:liipImagineFilter'
#            filters:
#                thumbnail: { size: [100, 100], mode: outbound }
#
#        default_big:
#            quality: 75
#            controller_action: 'SonataMediaBundle:Media:liipImagineFilter'
#            filters:
#                thumbnail: { size: [820, 70], mode: outbound }


# Enable Doctrine to map the provided entities
# doctrine:
#    orm:
#        entity_managers:
#           default:
#                mappings:
#                    SonataMediaBundle: ~
#                    ApplicationSonataMediaBundle: ~

doctrine_phpcr:
    odm:
        auto_mapping: true
        mappings:
            ApplicationSonataMediaBundle:
                prefix: Application\Sonata\MediaBundle\PHPCR
            SonataMediaBundle:
                prefix: Sonata\MediaBundle\PHPCR


services:
    sonata.media.admin.media:
        class: %sonata.media.admin.media.class%
        arguments: 
            - ~ 
            - %sonata.media.admin.media.entity%
            - %sonata.media.admin.media.controller%
            - @sonata.media.pool
#           - @sonata.classification.manager.category
        tags:
            - {name: sonata.admin, manager_type: doctrine_phpcr, group: sonata_media, label_catalogue: "%sonata.media.admin.media.translation_domain%", label_translator_strategy: "sonata.admin.label.strategy.underscore", label: "media"}
        calls:
            - [setTranslationDomain, ["%sonata.media.admin.media.translation_domain%"]]
            - [setTemplates, [{inner_list_row: SonataMediaBundle:MediaAdmin:inner_row_media.html.twig, base_list_field: SonataAdminBundle:CRUD:base_list_flat_field.html.twig, list: SonataMediaBundle:MediaAdmin:list.html.twig, edit: SonataMediaBundle:MediaAdmin:edit.html.twig}]]
            - [setRouteBuilder, [@sonata.admin.route.path_info_slashes]]    
