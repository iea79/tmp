<?php

namespace DaVinci\TaxiBundle\Entity;

use Doctrine\ORM\EntityRepository;

use DaVinci\TaxiBundle\Entity\User;

/**
 * PassengerRequestRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PassengerRequestRepository extends EntityRepository
{
	
	const DEFAULT_INTERVAL_HOURS = 24;
	const DEFAULT_LIMIT_ROWS = 20;
	
	/**
	 * @param \DaVinci\TaxiBundle\Entity\PassengerRequest $request
	 * @return void
	 */
	public function saveAll(\DaVinci\TaxiBundle\Entity\PassengerRequest $request)
	{
		$this->persistAll($request);		 
		$this->_em->flush();
	}
	
	/**
	 * @param \DaVinci\TaxiBundle\Entity\PassengerRequest $request
	 * @return void
	 */
	public function save(\DaVinci\TaxiBundle\Entity\PassengerRequest $request)
	{
		$this->_em->persist($request);
		$this->_em->flush();
	}
		
	/**
	 * @param integer $id
	 * @return \DaVinci\TaxiBundle\Entity\PassengerRequest $request
	 */
	public function getFullRequestById($id)
	{
		$query = $this->getFullQuery();
		$query->setParameters(array('requestId' => $id));
		
		return $query->getOneOrNullResult();
	}
    
    /**
	 * @param \DaVinci\TaxiBundle\Entity\User $user
     * @param integer $id
     * @param array $states
	 * @return \DaVinci\TaxiBundle\Entity\PassengerRequest $request
	 */
	public function getFullRequestForUserById(User $user, $id, array $states = array())
	{
        $params = array('requestId' => $id, 'requestUser' => $user);
        $where = array('user = :requestUser');
        
        if (count($states)) {
            $params['stateValues'] = $states;
            $where[] = 'req.stateValue IN (:stateValues)';
        }
        
		$query = $this->getFullQuery($where);
		$query->setParameters($params);
		
		return $query->getOneOrNullResult();
	}
	
	/**
	 * @param integer $id
	 * @return \DaVinci\TaxiBundle\Entity\PassengerRequest $request
	 */
	public function getRequestWithDriversById($id)
	{
		$query = $this->_em->createQuery("
			SELECT
				req, possibleDrivers, canceledDrivers
			FROM
				DaVinci\TaxiBundle\Entity\PassengerRequest req
			LEFT JOIN
				req.possibleDrivers possibleDrivers
			LEFT JOIN
				req.canceledDrivers canceledDrivers
			WHERE
				req.id = :requestId
		");
		$query->setParameters(array('requestId' => $id));
		
		return $query->getOneOrNullResult();
		
	}
	
	/**
	 * @param integer $userId
	 * @param string $state
	 * 
	 * @return array
	 */
	public function getAllUserRequestsByState($userId, $state)
	{
		$query = $this->_em->createQuery("
			SELECT 
				req 
			FROM 
				DaVinci\TaxiBundle\Entity\PassengerRequest req
			JOIN
				DaVinci\TaxiBundle\Entity\RoutePoint point	 
			WHERE 
				req.user = :userId AND req.stateValue = :stateValue 
			ORDER BY 
				req.id DESC
		");
		$query->setParameters(array(
			'userId' => $userId,
			'stateValue' => $state
		));
		
		return $query->getResult();
	}
	
	/**
	 * @param integer $userId
	 * @param array $states
	 *
	 * @return array
	 */
	public function getAllActualUserRequestsByStates($userId, array $states)
	{		
		$query = $this->_em->createQuery("
			SELECT
				req
			FROM
				DaVinci\TaxiBundle\Entity\PassengerRequest req
			JOIN
				req.routePoints points
			WHERE
				req.user = :userId 
				AND req.stateValue IN (:stateValues)
				AND req.pickUp > :availablePeriod
			ORDER BY 
				req.id DESC
		");
		$query->setParameter('userId', $userId);
		$query->setParameter('stateValues', $states);
		$query->setParameter(
			'availablePeriod',
			PassengerRequest::getAvailablePickUp(),
			\Doctrine\DBAL\Types\Type::DATETIMETZ
		);
	
		return $query->getResult();
	}
	
	/**
	 * @param integer $userId
	 *
	 * @return array
	 */
	public function getAllUserRequests($userId)
	{
		$query = $this->_em->createQuery("
			SELECT
				req
			FROM
				DaVinci\TaxiBundle\Entity\PassengerRequest req
			JOIN
				req.routePoints points
			WHERE
				req.user = :userId
			ORDER BY
				req.id DESC
		");
		$query->setParameters(array('userId' => $userId));
	
		return $query->getResult();
	}
	
	/**
	 * @param array $states
	 *
	 * @return array
	 */
	public function getActualRequestsByStates(array $states)
	{
		$query = $this->_em->createQuery("
			SELECT
				req
			FROM
				DaVinci\TaxiBundle\Entity\PassengerRequest req
			JOIN
				req.routePoints points
			JOIN
				req.tariff tariff
			LEFT JOIN
				req.possibleDrivers possibleDrivers		
			WHERE
				req.pickUp > :availablePeriod
				AND req.stateValue IN (:stateValues)
			ORDER BY
				req.pickUp ASC						
		");
		$query->setParameter(
			'availablePeriod',
			PassengerRequest::getAvailablePickUp(), 
			\Doctrine\DBAL\Types\Type::DATETIMETZ
		);
		$query->setParameter('stateValues', $states);
		$query->setMaxResults(self::DEFAULT_LIMIT_ROWS);

		$result = $query->getResult();
		foreach ($result as $key => $item) {
			if ($item->getPossibleDrivers()->count() >= PassengerRequest::POSSIBLE_DRIVERS_PER_REQUEST) {
				unset($result[$key]);
				continue;
			}
		}
															
		return $result;
	}
    
    /**
	 * @param array $states
	 *
	 * @return array
	 */
	public function getDriverActualRequestsByStates(IndependentDriver $driver, array $states)
	{
		$query = $this->_em->createQuery("
			SELECT
				req
			FROM
				DaVinci\TaxiBundle\Entity\PassengerRequest req
            JOIN
                req.vehicle veh
			JOIN
				req.routePoints points
			JOIN
				req.tariff tariff
			LEFT JOIN
				req.possibleDrivers possibleDrivers		
			WHERE
				req.pickUp > :availablePeriod
				AND req.stateValue IN (:stateValues)
                AND veh.vehicleClass = :vehicleClass
			ORDER BY
				req.pickUp ASC						
		");
		$query->setParameter(
			'availablePeriod',
			PassengerRequest::getAvailablePickUp(), 
			\Doctrine\DBAL\Types\Type::DATETIMETZ
		);
		$query->setParameter('stateValues', $states);
        $query->setParameter('vehicleClass', $driver->getVehicle()->getVehicleClass());
		$query->setMaxResults(self::DEFAULT_LIMIT_ROWS);

		$result = $query->getResult();
		foreach ($result as $key => $item) {
			if ($item->getPossibleDrivers()->count() >= PassengerRequest::POSSIBLE_DRIVERS_PER_REQUEST) {
				unset($result[$key]);
				continue;
			}
		}
															
		return $result;
	}
	
	public function getExpiredRequests()
	{
		$query = $this->_em->createQuery("
			SELECT
				req
			FROM
				DaVinci\TaxiBundle\Entity\PassengerRequest req
			WHERE
				req.pickUp <= :availablePeriod
				AND req.stateValue IN (:stateValues)
			ORDER BY
				req.id DESC
		");
		$query->setParameter(
			'availablePeriod',
			PassengerRequest::getAvailablePickUp(), 
			\Doctrine\DBAL\Types\Type::DATETIMETZ
		);
		$query->setParameter('stateValues', array(
			PassengerRequest::STATE_BEFORE_OPEN,
			PassengerRequest::STATE_OPEN,
			PassengerRequest::STATE_PENDING,
			PassengerRequest::STATE_SOLD
		));
		
		return $query->getResult();
	}
    
    private function getFullQuery(array $where = array())
    {
        $default = array('req.id = :requestId');
        $whereClause = implode(
            " AND ", 
            (count($where)) ? array_merge($default, $where) : $default
        );
                        
        return $this->_em->createQuery("
			SELECT
				req, points, vehicle, tariff, detail, options, seats, cages, services, conditions, user, driver
			FROM
				DaVinci\TaxiBundle\Entity\PassengerRequest req
			JOIN
				req.routePoints points
			JOIN
				req.vehicle vehicle
			JOIN
				req.passengerDetail detail
			JOIN
				req.tariff tariff		
			LEFT JOIN
				req.vehicleOptions options
			LEFT JOIN
				options.childSeats seats
			LEFT JOIN
				options.petCages cages		
			LEFT JOIN
				req.vehicleServices services
			LEFT JOIN
				req.vehicleDriverConditions	conditions
			LEFT JOIN
				req.user user
			LEFT JOIN
				req.driver driver					
			WHERE
				{$whereClause}
		");
    }    
	
	/**
	 * @param \DaVinci\TaxiBundle\Entity\PassengerRequest $request
	 * @return void
	 */
	private function persistAll(\DaVinci\TaxiBundle\Entity\PassengerRequest $request)
	{
		$this->_em->persist($request);
		
		$vehicle = $request->getVehicle();
		$vehicle->setPassengerRequest($request);
		$this->_em->persist($vehicle);
			
		$tariff = $request->getTariff();
		$tariff->setPassengerRequest($request);
		$this->_em->persist($tariff);
			
		$passengerDetail = $request->getPassengerDetail();
		$passengerDetail->setPassengerRequest($request);
		$this->_em->persist($passengerDetail);
			
		$vehicleServices = $request->getVehicleServices();
		$vehicleServices->setPassengerRequest($request);
		$this->_em->persist($vehicleServices);
			
		$vehicleDriverConditions = $request->getVehicleDriverConditions();
		$vehicleDriverConditions->setPassengerRequest($request);
		$this->_em->persist($vehicleDriverConditions);
		
		foreach ($request->getRoutePoints() as $routePoint) {
			$routePoint->setPassengerRequest($request);
			$this->_em->persist($routePoint);
		}
		
		$vehicleOptions = $request->getVehicleOptions();
		$vehicleOptions->setPassengerRequest($request);
		$this->_em->persist($vehicleOptions);
		
		foreach ($vehicleOptions->getPetCages() as $cage) {
			$cage->setVehicleOptions($vehicleOptions);
			$this->_em->persist($cage);
		}
		
		foreach ($vehicleOptions->getChildSeats() as $seat) {
			$seat->setVehicleOptions($vehicleOptions);
			$this->_em->persist($seat);
		}
	}
	
}
